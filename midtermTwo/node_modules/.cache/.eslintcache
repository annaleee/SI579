[{"/Users/annalee/Desktop/study/SI579/midtermTwo/src/index.js":"1","/Users/annalee/Desktop/study/SI579/midtermTwo/src/ExamComponents.js":"2","/Users/annalee/Desktop/study/SI579/midtermTwo/src/problems/problem_4.js":"3","/Users/annalee/Desktop/study/SI579/midtermTwo/src/problems/problem_5.js":"4","/Users/annalee/Desktop/study/SI579/midtermTwo/src/problems/problem_3.js":"5","/Users/annalee/Desktop/study/SI579/midtermTwo/src/problems/problem_1.js":"6","/Users/annalee/Desktop/study/SI579/midtermTwo/src/problems/problem_2.js":"7"},{"size":2635,"mtime":1649104296790,"results":"8","hashOfConfig":"9"},{"size":2606,"mtime":1649031382000,"results":"10","hashOfConfig":"9"},{"size":1618,"mtime":1649105488015,"results":"11","hashOfConfig":"9"},{"size":2701,"mtime":1649107824478,"results":"12","hashOfConfig":"9"},{"size":1075,"mtime":1649104550482,"results":"13","hashOfConfig":"9"},{"size":1752,"mtime":1649103159032,"results":"14","hashOfConfig":"9"},{"size":1340,"mtime":1649104034214,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1io90x5",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"19"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"19"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"19"},"/Users/annalee/Desktop/study/SI579/midtermTwo/src/index.js",[],[],["42","43"],"/Users/annalee/Desktop/study/SI579/midtermTwo/src/ExamComponents.js",[],[],"/Users/annalee/Desktop/study/SI579/midtermTwo/src/problems/problem_4.js",["44","45","46"],[],"import React, {useState} from 'react';\nexport const video = <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/heSbM0VqH7E\" title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>;\nexport const description =\n'In `src/problem_4.js`, write code that allows the user to increment the click counter by clicking the \"Clicked\" `<button />`\\\n element (or reset it to `0` by clicking the \"Reset\" `<button />`). Then, **use\\\n [the `localStorage` API](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) to make the click count\\\n persistent**. When the user reloads the page, it should remember the number of clicks.\\n\\n\\\n - *Note 1: your code should handle plural rules correctly; it should be \"Clicked 1 time\" and\\\n \"Clicked 2 time**s**\".*\\n\\\n - *Note 2: remember that `localStorage` can only store **strings**.*\\\n ';\n\nexport function Problem () {\n    let counter = localStorage.getItem('myCounter')==null?0:localStorage.getItem('myCounter');\n    const [word,SetNum] = useState(counter==1?counter+' time':counter+' times');\n    function onCount()\n    {\n        counter ++;\n        SetNum(counter==1?counter+' time':counter+' times')\n        localStorage.setItem('myCounter', counter);\n    }\n    return <div className=\"btn-group\">\n            <button className=\"btn btn-primary\" onClick={onCount} >Clicked {word}</button>\n            <button className=\"btn btn-secondary\" onClick={()=>{localStorage.removeItem('myCounter');SetNum('0 time')}}>Reset</button>\n        </div>;\n    ;\n}","/Users/annalee/Desktop/study/SI579/midtermTwo/src/problems/problem_5.js",["47"],[],"/Users/annalee/Desktop/study/SI579/midtermTwo/src/problems/problem_3.js",["48","49"],[],"import React, {useState, useRef, useEffect}from \"react\";\nexport const video = <iframe width=\"560\" height=\"180\" src=\"https://www.youtube.com/embed/DXCE32wTcBk\" title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>;\nexport const description =\n'Modify the code in `src/problem_3.js` so that the greeting message updates as the user types into the `<input />`\\\n element, the greeting message updates. For example, if the user types `\"Jane\"` then the greeting\\\n message should say `\"Hello, Jane!\"`. The updates should happen **as** the user types into the `<input />` element.';\n\nexport function Problem () {\n    const [output, setOutput] = useState('Hello, ...!');\n    const inputRef = useRef();\n\n    function handleChange(){\n        setOutput(`Hello, ${inputRef.current.value}!`);\n        inputRef.current.focus();\n    }\n    return <>\n        <label>Enter your name: </label><input ref = {inputRef} onChange={handleChange}/>\n        <div>{output}</div>\n    </>;\n}\n","/Users/annalee/Desktop/study/SI579/midtermTwo/src/problems/problem_1.js",["50"],[],"import {useState} from 'react';\n\nexport const description =\n'The code in `src/problem_1.js` is supposed to allow users to enter a Fahrenheit temperature in the `<input />` element\\\n and show the equivalent Celsius temperature underneath it. However, the Celsius temperature does not update.\\\n Modify the value of `explanation` to briefly explain (in 1-3 sentences) why the current code does not work.\\\n Then, update the code so that it works properly.\\n\\n\\\n *Note: you do **not** need to handle non-numeric input. It\\'s OK to have \"NaN °F is NaN °C\" if the user enters\\\n something non-numeric for the Fahrenheit temperature.*\\\n ';\n\nexport const video = <iframe width=\"560\" height=\"250\" src=\"https://www.youtube.com/embed/Mez3xQEOMy0\" title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>;\nconst explanation = `The celsius is only valid with in the problem, so each time when the function problem run, it will be initiated as 40, but when the button change, celsius will be updated to the correct value, and then the problem will be run again to refresh this page, in this time, the celsius will be initialized to 40 again.`;\n\nfunction fToC(f) {\n    return (f-32)/1.8;\n}\n\nexport function Problem () {\n    const [fahrenheit, setFahrenheit] = useState(-40);\n\n    function fahrenheitUpdated(ev) {\n        const f = parseFloat(ev.target.value);\n        setFahrenheit(f);\n\n    }\n\n    return <>\n        <label>Enter a Fahrenheit temperature: </label><input value={fahrenheit} onChange={fahrenheitUpdated} type='number' />\n        <hr />\n        {fahrenheit} &deg;F is {fToC(fahrenheit).toFixed(2)} &deg;C\n        <p>{explanation}</p>\n    </>\n}","/Users/annalee/Desktop/study/SI579/midtermTwo/src/problems/problem_2.js",["51","52","53"],[],"\nimport React, {useState} from 'react';\nexport const video = <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Nn7v8Hiw1-0\" title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>;\nexport const description =\n'The `Problem` component in `src/problem_2.js` accepts a list of attributes (`props`).\\\n With three properties:\\n\\\n \\\n- `initial` is the value the counter should start at \\n\\\n- `min` represents the lowest value the counter can go\\n\\\n- `max` represents the highest value the counter can go\\n\\\n \\n\\\n Write code that allows users to increment/decrement the value by clicking the \"+\"/\"-\" button without going\\\n  over `max` or under `min`.\\\n ';\nexport function Problem (props) {\n    const [num,SetNum] = useState(props.initial);\n    function increment()\n    {\n        if(num==props.max) return\n        SetNum(num+1);\n    }\n\n    function decrement()\n    {\n        if(num==props.min) return\n        SetNum(num-1);\n    }\n    return <div className=\"btn-group\">\n            <button type=\"button\" className=\"btn btn-primary\" onClick={decrement}>-</button>\n            <span>    {\" \"+num+\" \"}    </span>\n            <button type=\"button\" className=\"btn btn-primary\" onClick={increment}>+</button>\n        </div>;\n}",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":4,"column":1,"nodeType":"60","messageId":"61","endLine":11,"endColumn":3},{"ruleId":"62","severity":1,"message":"63","line":15,"column":43,"nodeType":"64","messageId":"65","endLine":15,"endColumn":45},{"ruleId":"62","severity":1,"message":"63","line":19,"column":23,"nodeType":"64","messageId":"65","endLine":19,"endColumn":25},{"ruleId":"66","severity":1,"message":"67","line":47,"column":22,"nodeType":"68","endLine":47,"endColumn":63},{"ruleId":"69","severity":1,"message":"70","line":1,"column":34,"nodeType":"71","messageId":"72","endLine":1,"endColumn":43},{"ruleId":"58","severity":1,"message":"59","line":4,"column":1,"nodeType":"60","messageId":"61","endLine":6,"endColumn":117},{"ruleId":"58","severity":1,"message":"59","line":4,"column":1,"nodeType":"60","messageId":"61","endLine":10,"endColumn":3},{"ruleId":"58","severity":1,"message":"59","line":5,"column":1,"nodeType":"60","messageId":"61","endLine":14,"endColumn":3},{"ruleId":"62","severity":1,"message":"63","line":19,"column":15,"nodeType":"64","messageId":"65","endLine":19,"endColumn":17},{"ruleId":"62","severity":1,"message":"63","line":25,"column":15,"nodeType":"64","messageId":"65","endLine":25,"endColumn":17},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-multi-str","Multiline support is limited to browsers supporting ES5 only.","Literal","multilineString","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]