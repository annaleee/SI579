{"ast":null,"code":"var _jsxFileName = \"/Users/annalee/Desktop/study/SI579/midtermTwo/src/problems/problem_1.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const description = 'The code in `src/problem_1.js` is supposed to allow users to enter a Fahrenheit temperature in the `<input />` element\\\n and show the equivalent Celsius temperature underneath it. However, the Celsius temperature does not update.\\\n Modify the value of `explanation` to briefly explain (in 1-3 sentences) why the current code does not work.\\\n Then, update the code so that it works properly.\\n\\n\\\n *Note: you do **not** need to handle non-numeric input. It\\'s OK to have \"NaN 째F is NaN 째C\" if the user enters\\\n something non-numeric for the Fahrenheit temperature.*\\\n ';\nexport const video = /*#__PURE__*/_jsxDEV(\"iframe\", {\n  width: \"560\",\n  height: \"250\",\n  src: \"https://www.youtube.com/embed/Mez3xQEOMy0\",\n  title: \"YouTube video player\",\n  frameBorder: \"0\",\n  allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n  allowFullScreen: true\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 12,\n  columnNumber: 22\n}, this);\nconst explanation = `The celsius is only valid with in the problem, so each time when the function problem run, it will be initiated as 40, but when the button change, the value will not be updated to html, because `;\n\nfunction fToC(f) {\n  return (f - 32) / 1.8;\n}\n\nexport function Problem() {\n  _s();\n\n  const [fahrenheit, setFahrenheit] = useState(-40);\n  let celsius = -40;\n\n  function fahrenheitUpdated(ev) {\n    const f = parseFloat(ev.target.value);\n    const c = fToC(f);\n    setFahrenheit(f);\n    celsius = c;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Enter a Fahrenheit temperature: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: fahrenheit,\n      onChange: fahrenheitUpdated,\n      type: \"number\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 56\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), fahrenheit, \" \\xB0F is \", celsius.toFixed(2), \" \\xB0C\", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: explanation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Problem, \"ZN1SStaFs9vsMzL5Wp+nM7BLzbU=\");\n\n_c = Problem;\n\nvar _c;\n\n$RefreshReg$(_c, \"Problem\");","map":{"version":3,"sources":["/Users/annalee/Desktop/study/SI579/midtermTwo/src/problems/problem_1.js"],"names":["useState","description","video","explanation","fToC","f","Problem","fahrenheit","setFahrenheit","celsius","fahrenheitUpdated","ev","parseFloat","target","value","c","toFixed"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;;;AAEA,OAAO,MAAMC,WAAW,GACxB;AACA;AACA;AACA;AACA;AACA;AACA,EAPO;AASP,OAAO,MAAMC,KAAK,gBAAG;AAAQ,EAAA,KAAK,EAAC,KAAd;AAAoB,EAAA,MAAM,EAAC,KAA3B;AAAiC,EAAA,GAAG,EAAC,2CAArC;AAAiF,EAAA,KAAK,EAAC,sBAAvF;AAA8G,EAAA,WAAW,EAAC,GAA1H;AAA8H,EAAA,KAAK,EAAC,0FAApI;AAA+N,EAAA,eAAe;AAA9O;AAAA;AAAA;AAAA;AAAA,QAAd;AACP,MAAMC,WAAW,GAAI,oMAArB;;AAEA,SAASC,IAAT,CAAcC,CAAd,EAAiB;AACb,SAAO,CAACA,CAAC,GAAC,EAAH,IAAO,GAAd;AACH;;AAED,OAAO,SAASC,OAAT,GAAoB;AAAA;;AACvB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,CAAC,EAAF,CAA5C;AACA,MAAIS,OAAO,GAAG,CAAC,EAAf;;AAEA,WAASC,iBAAT,CAA2BC,EAA3B,EAA+B;AAC3B,UAAMN,CAAC,GAAGO,UAAU,CAACD,EAAE,CAACE,MAAH,CAAUC,KAAX,CAApB;AACA,UAAMC,CAAC,GAAGX,IAAI,CAACC,CAAD,CAAd;AACAG,IAAAA,aAAa,CAACH,CAAD,CAAb;AAEAI,IAAAA,OAAO,GAAGM,CAAV;AACH;;AAED,sBAAO;AAAA,4BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,eAC4C;AAAO,MAAA,KAAK,EAAER,UAAd;AAA0B,MAAA,QAAQ,EAAEG,iBAApC;AAAuD,MAAA,IAAI,EAAC;AAA5D;AAAA;AAAA;AAAA;AAAA,YAD5C,eAEH;AAAA;AAAA;AAAA;AAAA,YAFG,EAGFH,UAHE,gBAGqBE,OAAO,CAACO,OAAR,CAAgB,CAAhB,CAHrB,yBAIH;AAAA,gBAAIb;AAAJ;AAAA;AAAA;AAAA;AAAA,YAJG;AAAA,kBAAP;AAMH;;GAlBeG,O;;KAAAA,O","sourcesContent":["import {useState} from 'react';\n\nexport const description =\n'The code in `src/problem_1.js` is supposed to allow users to enter a Fahrenheit temperature in the `<input />` element\\\n and show the equivalent Celsius temperature underneath it. However, the Celsius temperature does not update.\\\n Modify the value of `explanation` to briefly explain (in 1-3 sentences) why the current code does not work.\\\n Then, update the code so that it works properly.\\n\\n\\\n *Note: you do **not** need to handle non-numeric input. It\\'s OK to have \"NaN 째F is NaN 째C\" if the user enters\\\n something non-numeric for the Fahrenheit temperature.*\\\n ';\n\nexport const video = <iframe width=\"560\" height=\"250\" src=\"https://www.youtube.com/embed/Mez3xQEOMy0\" title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>;\nconst explanation = `The celsius is only valid with in the problem, so each time when the function problem run, it will be initiated as 40, but when the button change, the value will not be updated to html, because `;\n\nfunction fToC(f) {\n    return (f-32)/1.8;\n}\n\nexport function Problem () {\n    const [fahrenheit, setFahrenheit] = useState(-40);\n    let celsius = -40;\n\n    function fahrenheitUpdated(ev) {\n        const f = parseFloat(ev.target.value);\n        const c = fToC(f);\n        setFahrenheit(f);\n\n        celsius = c;\n    }\n\n    return <>\n        <label>Enter a Fahrenheit temperature: </label><input value={fahrenheit} onChange={fahrenheitUpdated} type='number' />\n        <hr />\n        {fahrenheit} &deg;F is {celsius.toFixed(2)} &deg;C\n        <p>{explanation}</p>\n    </>\n}"]},"metadata":{},"sourceType":"module"}