{"ast":null,"code":"var _jsxFileName = \"/Users/annalee/Desktop/study/SI579/midtermTwo/src/problems/problem_5.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const video = /*#__PURE__*/_jsxDEV(\"iframe\", {\n  width: \"560\",\n  height: \"315\",\n  src: \"https://www.youtube.com/embed/-BpNlGMvBE4\",\n  title: \"YouTube video player\",\n  frameBorder: \"0\",\n  allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n  allowFullScreen: true\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 2,\n  columnNumber: 22\n}, this);\nexport const description = `Every time the page loads, a new 200x300 image should be fetched from Picsum and \ndisplayed below. When you refresh your browser, a new random image should appear.\nThe output should say \"loading\" prior to the image being loaded.\n\n**IF YOU WOULD LIKE BUFFER CREDIT** *(you can't get over 100% on the exam, but this can \noffset lost points on prior problems)*:  Add a button that loads a new image from Picsum\neverytime it is clicked, without having to refresh the browser.`;\nexport function Problem() {\n  _s();\n\n  console.log(\"refresh\");\n  const [url, setURL] = useState(getImage());\n  const [isLoad, setIsLoad] = useState(false);\n  const [isRefresh, setRefresh] = useState(false);\n  /**\n   * TODO: ** uncomment the fetch() below. For it to work, it must be moved\n   *   somewhere it will be executed after this component initializes.\n   *\n   * Tip - Aside from the TODO, the fetch call does not need to be changed...\n   *    just moved somewhere slightly different.\n   *\n   * If you're unsure how to do this, maybe you can look through some\n   * University of Michigan events and see if they're offering something that\n   * might benefit you ðŸ¤”ðŸ¤”ðŸ¤”ðŸ¤”ðŸ¤”ðŸ¤”.\n   */\n\n  function getImage() {\n    if (isRefresh) {\n      return;\n    } else {\n      setRefresh(true);\n    }\n\n    fetch('https://picsum.photos/200/300').then(response => response.url).then(returnedUrl => {\n      console.log('the image url', returnedUrl); // TODO: something needs to happen here with\n      // returnedUrl.\n\n      setURL(returnedUrl);\n      setIsLoad(true);\n    });\n  }\n\n  useEffect(() => {\n    if (isLoad) {\n      document.title = /*#__PURE__*/_jsxDEV(\"img\", {\n        url: url,\n        alt: \"this is a picture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 30\n      }, this);\n    } else {\n      document.title = \"Loading...\";\n    }\n  }); // TODO: if an image has been fetched, return an <img> that displays it.\n  //  Otherwise show \"loading...\"\n  // Tip - don't worry about setting image width/height. The image returned by\n  //   the fetch request has the needed dimensions.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setURL(false);\n        getImage();\n      },\n      className: \"btn btn-primary\",\n      children: \" Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Problem, \"H+n0LvB22qV5MYzcehmFF8+hZug=\");\n\n_c = Problem;\n\nvar _c;\n\n$RefreshReg$(_c, \"Problem\");","map":{"version":3,"sources":["/Users/annalee/Desktop/study/SI579/midtermTwo/src/problems/problem_5.js"],"names":["React","useState","useEffect","video","description","Problem","console","log","url","setURL","getImage","isLoad","setIsLoad","isRefresh","setRefresh","fetch","then","response","returnedUrl","document","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;AACA,OAAO,MAAMC,KAAK,gBAAG;AAAQ,EAAA,KAAK,EAAC,KAAd;AAAoB,EAAA,MAAM,EAAC,KAA3B;AAAiC,EAAA,GAAG,EAAC,2CAArC;AAAiF,EAAA,KAAK,EAAC,sBAAvF;AAA8G,EAAA,WAAW,EAAC,GAA1H;AAA8H,EAAA,KAAK,EAAC,0FAApI;AAA+N,EAAA,eAAe;AAA9O;AAAA;AAAA;AAAA;AAAA,QAAd;AACP,OAAO,MAAMC,WAAW,GACvB;AACD;AACA;AACA;AACA;AACA;AACA,gEAPO;AASP,OAAO,SAASC,OAAT,GAAoB;AAAA;;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAeR,QAAQ,CAACS,QAAQ,EAAT,CAA7B;AACA,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAqBX,QAAQ,CAAC,KAAD,CAAnC;AACA,QAAK,CAACY,SAAD,EAAWC,UAAX,IAAyBb,QAAQ,CAAC,KAAD,CAAtC;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,WAASS,QAAT,GAAmB;AACf,QAAGG,SAAH,EAAa;AACT;AACH,KAFD,MAEK;AACDC,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH;;AACDC,IAAAA,KAAK,CAAC,+BAAD,CAAL,CACCC,IADD,CACOC,QAAD,IAAcA,QAAQ,CAACT,GAD7B,EAECQ,IAFD,CAEOE,WAAD,IAAiB;AACnBZ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BW,WAA7B,EADmB,CAEnB;AACA;;AACAT,MAAAA,MAAM,CAACS,WAAD,CAAN;AACAN,MAAAA,SAAS,CAAC,IAAD,CAAT;AACH,KARD;AASH;;AAEDV,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGS,MAAH,EAAU;AACNQ,MAAAA,QAAQ,CAACC,KAAT,gBAAiB;AAAK,QAAA,GAAG,EAAEZ,GAAV;AAAe,QAAA,GAAG,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,cAAjB;AACH,KAFD,MAEK;AACDW,MAAAA,QAAQ,CAACC,KAAT,GAAiB,YAAjB;AACH;AACJ,GANQ,CAAT,CAjCuB,CAyCvB;AACA;AACA;AACA;;AACA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,OAAO,EAAE,MAAI;AAACX,QAAAA,MAAM,CAAC,KAAD,CAAN;AAAcC,QAAAA,QAAQ;AAAG,OAA/C;AAAiD,MAAA,SAAS,EAAC,iBAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GAnDeL,O;;KAAAA,O","sourcesContent":["import React, {useState, useEffect} from 'react';\nexport const video = <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/-BpNlGMvBE4\" title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>;\nexport const description =\n`Every time the page loads, a new 200x300 image should be fetched from Picsum and \ndisplayed below. When you refresh your browser, a new random image should appear.\nThe output should say \"loading\" prior to the image being loaded.\n\n**IF YOU WOULD LIKE BUFFER CREDIT** *(you can't get over 100% on the exam, but this can \noffset lost points on prior problems)*:  Add a button that loads a new image from Picsum\neverytime it is clicked, without having to refresh the browser.`;\n\nexport function Problem () {\n    console.log(\"refresh\");\n    const [url, setURL]= useState(getImage());\n    const [isLoad,setIsLoad] = useState(false);\n    const[isRefresh,setRefresh] = useState(false);\n    /**\n     * TODO: ** uncomment the fetch() below. For it to work, it must be moved\n     *   somewhere it will be executed after this component initializes.\n     *\n     * Tip - Aside from the TODO, the fetch call does not need to be changed...\n     *    just moved somewhere slightly different.\n     *\n     * If you're unsure how to do this, maybe you can look through some\n     * University of Michigan events and see if they're offering something that\n     * might benefit you ðŸ¤”ðŸ¤”ðŸ¤”ðŸ¤”ðŸ¤”ðŸ¤”.\n     */\n    function getImage(){\n        if(isRefresh){\n            return;\n        }else{\n            setRefresh(true);\n        }\n        fetch('https://picsum.photos/200/300')\n        .then((response) => response.url)\n        .then((returnedUrl) => {\n            console.log('the image url', returnedUrl);\n            // TODO: something needs to happen here with\n            // returnedUrl.\n            setURL(returnedUrl);\n            setIsLoad(true);\n        });\n    }\n\n    useEffect(() => {\n        if(isLoad){\n            document.title = <img url={url} alt=\"this is a picture\" ></img>;\n        }else{\n            document.title = \"Loading...\";\n        }\n    })\n\n    // TODO: if an image has been fetched, return an <img> that displays it.\n    //  Otherwise show \"loading...\"\n    // Tip - don't worry about setting image width/height. The image returned by\n    //   the fetch request has the needed dimensions.\n    return (\n        <div>\n            <div>Loading...</div>\n            <button onClick={()=>{setURL(false);getImage()}} className=\"btn btn-primary\"> Refresh</button>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}